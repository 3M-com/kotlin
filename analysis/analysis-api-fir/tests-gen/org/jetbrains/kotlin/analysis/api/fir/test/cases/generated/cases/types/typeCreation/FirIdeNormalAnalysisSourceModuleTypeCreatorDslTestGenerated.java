/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.analysis.api.fir.test.cases.generated.cases.types.typeCreation;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.kotlin.analysis.api.fir.test.configurators.AnalysisApiFirTestConfiguratorFactory;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfiguratorFactoryData;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiTestConfigurator;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.TestModuleKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.FrontendKind;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisSessionMode;
import org.jetbrains.kotlin.analysis.test.framework.test.configurators.AnalysisApiMode;
import org.jetbrains.kotlin.analysis.api.impl.base.test.cases.types.typeCreation.AbstractTypeCreatorDslTest;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.analysis.api.GenerateAnalysisApiTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("analysis/analysis-api/testData/types/typeCreation/byDsl")
@TestDataPath("$PROJECT_ROOT")
public class FirIdeNormalAnalysisSourceModuleTypeCreatorDslTestGenerated extends AbstractTypeCreatorDslTest {
  @NotNull
  @Override
  public AnalysisApiTestConfigurator getConfigurator() {
    return AnalysisApiFirTestConfiguratorFactory.INSTANCE.createConfigurator(
      new AnalysisApiTestConfiguratorFactoryData(
        FrontendKind.Fir,
        TestModuleKind.Source,
        AnalysisSessionMode.Normal,
        AnalysisApiMode.Ide
      )
    );
  }

  @Test
  public void testAllFilesPresentInByDsl() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/types/typeCreation/byDsl"), Pattern.compile("^(.+)\\.kt$"), null, true);
  }

  @Nested
  @TestMetadata("analysis/analysis-api/testData/types/typeCreation/byDsl/classType")
  @TestDataPath("$PROJECT_ROOT")
  public class ClassType {
    @Test
    public void testAllFilesPresentInClassType() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/types/typeCreation/byDsl/classType"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("boxedArrayWithStringTypeArgument.kt")
    public void testBoxedArrayWithStringTypeArgument() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/boxedArrayWithStringTypeArgument.kt");
    }

    @Test
    @TestMetadata("intTypeMarkNullable.kt")
    public void testIntTypeMarkNullable() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/intTypeMarkNullable.kt");
    }

    @Test
    @TestMetadata("lessTypeArgumentsThanExpected.kt")
    public void testLessTypeArgumentsThanExpected() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/lessTypeArgumentsThanExpected.kt");
    }

    @Test
    @TestMetadata("localUserType.kt")
    public void testLocalUserType() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/localUserType.kt");
    }

    @Test
    @TestMetadata("moreTypeArgumentsThanExpected.kt")
    public void testMoreTypeArgumentsThanExpected() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/moreTypeArgumentsThanExpected.kt");
    }

    @Test
    @TestMetadata("nonExistingClassId.kt")
    public void testNonExistingClassId() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/nonExistingClassId.kt");
    }

    @Test
    @TestMetadata("nonExistingClassIdWithAnnotations.kt")
    public void testNonExistingClassIdWithAnnotations() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/nonExistingClassIdWithAnnotations.kt");
    }

    @Test
    @TestMetadata("userGenericTypeWithStarProjection.kt")
    public void testUserGenericTypeWithStarProjection() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/userGenericTypeWithStarProjection.kt");
    }

    @Test
    @TestMetadata("userType.kt")
    public void testUserType() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/userType.kt");
    }

    @Test
    @TestMetadata("userTypeWithAnnotations.kt")
    public void testUserTypeWithAnnotations() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/userTypeWithAnnotations.kt");
    }

    @Test
    @TestMetadata("withAnnotationRequiringArguments.kt")
    public void testWithAnnotationRequiringArguments() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/withAnnotationRequiringArguments.kt");
    }

    @Test
    @TestMetadata("withGenericAnnotation.kt")
    public void testWithGenericAnnotation() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/classType/withGenericAnnotation.kt");
    }
  }

  @Nested
  @TestMetadata("analysis/analysis-api/testData/types/typeCreation/byDsl/dynamicType")
  @TestDataPath("$PROJECT_ROOT")
  public class DynamicType {
    @Test
    public void testAllFilesPresentInDynamicType() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/types/typeCreation/byDsl/dynamicType"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("dynamicType.kt")
    public void testDynamicType() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/dynamicType/dynamicType.kt");
    }

    @Test
    @TestMetadata("withAnnotations.kt")
    public void testWithAnnotations() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/dynamicType/withAnnotations.kt");
    }
  }

  @Nested
  @TestMetadata("analysis/analysis-api/testData/types/typeCreation/byDsl/starTypeProjection")
  @TestDataPath("$PROJECT_ROOT")
  public class StarTypeProjection {
    @Test
    public void testAllFilesPresentInStarTypeProjection() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("analysis/analysis-api/testData/types/typeCreation/byDsl/starTypeProjection"), Pattern.compile("^(.+)\\.kt$"), null, true);
    }

    @Test
    @TestMetadata("starTypeProjection.kt")
    public void testStarTypeProjection() {
      runTest("analysis/analysis-api/testData/types/typeCreation/byDsl/starTypeProjection/starTypeProjection.kt");
    }
  }
}

RAW_FIR:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

IMPORTS:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

COMPILER_REQUIRED_ANNOTATIONS:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

COMPANION_GENERATION:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

SUPER_TYPES:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

TYPES:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

STATUS:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

EXPECT_ACTUAL_MATCHING:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

ARGUMENTS_OF_ANNOTATIONS:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

CONTRACTS:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

ANNOTATIONS_ARGUMENTS_MAPPING:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

BODY_RESOLVE:
TARGET: public open override [ResolvedTo(STATUS)] val something: R|kotlin/String|
    public [<synthetic> ResolvedTo(STATUS)] get(): R|kotlin/String| { LAZY_BLOCK }

FILE: [ResolvedTo(IMPORTS)] Derived.kt
    public final [ResolvedTo(STATUS)] class Derived : R|Base| {
        public [ResolvedTo(STATUS)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            LAZY_super<R|Base|>
        }

        public open override [ResolvedTo(STATUS)] fun getSomething(): R|kotlin/String| { LAZY_BLOCK }

    }

FILE RAW TO BODY:
FILE: [ResolvedTo(BODY_RESOLVE)] Derived.kt
    public final [ResolvedTo(BODY_RESOLVE)] class Derived : R|Base| {
        public [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=Derived] constructor(): R|Derived| {
            super<R|Base|>()
        }

        public open override [ResolvedTo(BODY_RESOLVE)] fun getSomething(): R|kotlin/String| {
            ^getSomething String(42)
        }

    }

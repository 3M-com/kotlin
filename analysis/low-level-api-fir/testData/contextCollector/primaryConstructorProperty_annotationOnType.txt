Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope
    Element 6
        Implicit receiver:
            FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
                Type: Foo.Companion
    Element 7
        Scope: FirNestedClassifierScopeImpl
            Classifiers:
                FirRegularClassSymbol public final companion object Companion : R|kotlin/Any|
                FirRegularClassSymbol public final? class NestedClass : R|kotlin/Any|
    Element 8
        Scope: FirMemberTypeParameterScope
            Classifiers:
                FirTypeParameterSymbol TypeParameter
    Element 9
        Implicit receiver:
            FirRegularClassSymbol public final class Foo<TypeParameter> : R|kotlin/Any|
                Type: Foo<TypeParameter>
    Element 10
        Scope: FirLocalScope

FILE: [ResolvedTo(IMPORTS)] primaryConstructorProperty_annotationOnType.kt
    @R|kotlin/annotation/Target|[Types](Q|kotlin/annotation/AnnotationTarget|.R|kotlin/annotation/AnnotationTarget.TYPE|) public final [ResolvedTo(STATUS)] annotation class MyAnnotation : R|kotlin/Annotation| {
        public [ResolvedTo(STATUS)] constructor([ResolvedTo(STATUS)] name: R|kotlin/String|): R|MyAnnotation| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] val name: R|kotlin/String| = R|<local>/name|
            public [ResolvedTo(STATUS)] get(): R|kotlin/String|

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] class Foo<[ResolvedTo(ANNOTATION_ARGUMENTS)] TypeParameter> : R|kotlin/Any| {
        public [ResolvedTo(ANNOTATION_ARGUMENTS)] constructor<[ResolvedTo(ANNOTATION_ARGUMENTS)] TypeParameter>([ResolvedTo(ANNOTATION_ARGUMENTS)] a: R|kotlin/String| = LAZY_EXPRESSION, [ResolvedTo(ANNOTATION_ARGUMENTS)] b: R|@R|MyAnnotation|(name = this@R|/Foo.Companion|.R|/Foo.Companion.CONSTANT_NAME|)  kotlin/Int| = LAZY_EXPRESSION, [ResolvedTo(ANNOTATION_ARGUMENTS)] c: R|kotlin/Long| = LAZY_EXPRESSION): R|Foo<TypeParameter>| {
            LAZY_super<R|kotlin/Any|>
        }

        public final [ResolvedTo(STATUS)] val a: R|kotlin/String| = R|<local>/a|
            public [ResolvedTo(STATUS)] get(): R|kotlin/String|

        public final [ResolvedTo(BODY_RESOLVE)] val b: R|@R|MyAnnotation|(name = this@R|/Foo.Companion|.R|/Foo.Companion.CONSTANT_NAME|)  kotlin/Int| = R|<local>/b|
            public [ResolvedTo(BODY_RESOLVE)] get(): R|@R|MyAnnotation|(name = this@R|/Foo.Companion|.R|/Foo.Companion.CONSTANT_NAME|)  kotlin/Int|

        public final [ResolvedTo(STATUS)] val c: R|kotlin/Long| = R|<local>/c|
            public [ResolvedTo(STATUS)] get(): R|kotlin/Long|

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] constructor(): R|Foo.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

        public final companion [ResolvedTo(STATUS)] object Companion : R|kotlin/Any| {
            private [ResolvedTo(STATUS)] constructor(): R|Foo.Companion| {
                LAZY_super<R|kotlin/Any|>
            }

            public final const [ResolvedTo(CONTRACTS)] val CONSTANT_NAME: R|kotlin/String| = LAZY_EXPRESSION
                public [ResolvedTo(CONTRACTS)] get(): R|kotlin/String|

        }

    }

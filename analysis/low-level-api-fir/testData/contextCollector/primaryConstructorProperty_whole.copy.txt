Tower Data Context:
    Element 0
        Scope: FirDefaultStarImportingScope
    Element 1
        Scope: FirExplicitStarImportingScope
    Element 2
        Scope: FirDefaultSimpleImportingScope
    Element 3
        Scope: FirDefaultSimpleImportingScope
    Element 4
        Scope: FirPackageMemberScope
    Element 5
        Scope: FirExplicitSimpleImportingScope
    Element 6
        Scope: FirNestedClassifierScopeImpl
            Classifiers:
                FirRegularClassSymbol public final? class NestedClass : R|kotlin/Any|
    Element 7
        Scope: FirMemberTypeParameterScope
            Classifiers:
                FirTypeParameterSymbol TypeParameter
    Element 8
        Implicit receiver:
            FirRegularClassSymbol public final class Foo<TypeParameter> : R|kotlin/Any|
                Type: Foo<TypeParameter>

FILE: [ResolvedTo(RAW_FIR)] primaryConstructorProperty_whole.kt
    public final? [ResolvedTo(RAW_FIR)] class Foo<[ResolvedTo(RAW_FIR)] TypeParameter> : R|kotlin/Any| {
        public? [ResolvedTo(RAW_FIR)] constructor<[ResolvedTo(RAW_FIR)] TypeParameter>([ResolvedTo(RAW_FIR)] a: String = LAZY_EXPRESSION, [ResolvedTo(RAW_FIR)] b: Int = LAZY_EXPRESSION, [ResolvedTo(RAW_FIR)] c: Long = LAZY_EXPRESSION): R|Foo<TypeParameter>| {
            LAZY_super<R|kotlin/Any|>
        }

        public? final? [ResolvedTo(RAW_FIR)] val a: String = R|<local>/a|
            public? [ResolvedTo(RAW_FIR)] get(): String

        public? final? [ResolvedTo(RAW_FIR)] val b: Int = R|<local>/b|
            public? [ResolvedTo(RAW_FIR)] get(): Int

        public? final? [ResolvedTo(RAW_FIR)] val c: Long = R|<local>/c|
            public? [ResolvedTo(RAW_FIR)] get(): Long

        public final? [ResolvedTo(RAW_FIR)] class NestedClass : R|kotlin/Any| {
            public? [ResolvedTo(RAW_FIR)] constructor(): R|Foo.NestedClass| {
                LAZY_super<R|kotlin/Any|>
            }

        }

    }

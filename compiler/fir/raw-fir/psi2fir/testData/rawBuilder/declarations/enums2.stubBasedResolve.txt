FILE: [ResolvedTo(BODY_RESOLVE)] enums2.kt
    public abstract [ResolvedTo(BODY_RESOLVE)] interface Some : R|kotlin/Any| {
    }
    public final [ResolvedTo(BODY_RESOLVE)] object O1 : R|Some| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=O1] constructor(): R|O1| {
            super<R|kotlin/Any|>()
        }

    }
    public final [ResolvedTo(BODY_RESOLVE)] object O2 : R|Some| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=O2] constructor(): R|O2| {
            super<R|kotlin/Any|>()
        }

    }
    public final [ResolvedTo(ANNOTATION_ARGUMENTS)] enum class SomeEnum : R|kotlin/Enum<SomeEnum>| {
        private [ResolvedTo(BODY_RESOLVE)] [ContainingClassKey=SomeEnum] constructor([ResolvedTo(BODY_RESOLVE)] [CorrespondingProperty=/SomeEnum.x] x: R|Some|): R|SomeEnum| {
            super<R|kotlin/Enum<SomeEnum>|>()
        }

        public? final? [ResolvedTo(TYPES)] [IsFromPrimaryConstructor=true] val x: R|Some| = R|<local>/x|
            public? [ResolvedTo(TYPES)] [ContainingClassKey=SomeEnum] get(): R|Some|

        public final static [ResolvedTo(TYPES)] [ContainingClassKey=SomeEnum] enum entry FIRST: R|SomeEnum| = LAZY_EXPRESSION
        public final static [ResolvedTo(TYPES)] [ContainingClassKey=SomeEnum] enum entry SECOND: R|SomeEnum| = LAZY_EXPRESSION
        public? abstract [ResolvedTo(TYPES)] fun check([ResolvedTo(TYPES)] y: R|Some|): R|kotlin/Boolean|

        public final static [ResolvedTo(TYPES)] [ContainingClassKey=SomeEnum] fun values(): R|kotlin/Array<SomeEnum>| {
        }

        public final static [ResolvedTo(TYPES)] [ContainingClassKey=SomeEnum] fun valueOf([ResolvedTo(TYPES)] value: R|kotlin/String|): R|SomeEnum| {
        }

        public final static [ResolvedTo(TYPES)] [ContainingClassKey=SomeEnum] val entries: R|kotlin/enums/EnumEntries<SomeEnum>|
            public [ResolvedTo(TYPES)] get(): R|kotlin/enums/EnumEntries<SomeEnum>|

    }

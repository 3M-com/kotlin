// Generated by JFlex 1.10.14 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/org/jetbrains/kotlin/kdoc/lexer/KDoc.flex

package org.jetbrains.kotlin.kdoc.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.text.CharArrayUtil;
import java.lang.Character;
import org.jetbrains.kotlin.kdoc.parser.KDocKnownTag;


class _KDocLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LINE_BEGINNING = 2;
  public static final int CONTENTS_BEGINNING = 4;
  public static final int TAG_BEGINNING = 6;
  public static final int TAG_TEXT_BEGINNING = 8;
  public static final int CONTENTS = 10;
  public static final int CODE_BLOCK = 12;
  public static final int CODE_BLOCK_LINE_BEGINNING = 14;
  public static final int CODE_BLOCK_CONTENTS_BEGINNING = 16;
  public static final int INDENTED_CODE_BLOCK = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u1b00\126\u0100\1\u2500\1\u0100\1\u2600"+
    "\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\53\u0100\1\u2c00\10\u2d00"+
    "\31\u1f00\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00\1\u5000"+
    "\3\u0100\1\u5100\1\u5200\1\u5300\11\u1f00\1\u5400\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\41\u1f00"+
    "\1\u5e00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\27\u1f00\1\u6200"+
    "\1\u6300\1\u6400\1\u6500\7\u1f00\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\1\u1f00\1\u6a00\2\u1f00\1\u6b00\1\u6c00\1\u6d00\2\u1f00\1\u6e00"+
    "\1\u1f00\1\u6f00\21\u1f00\246\u0100\1\u7000\20\u0100\1\u7100\1\u7200"+
    "\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100\1\u7500\5\u1f00"+
    "\23\u0100\1\u7600\17\u0100\1\u7700\u0ddc\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\3\0\1\7\3\0\1\10\1\11\1\12\3\0\1\13"+
    "\1\14\12\15\6\0\1\16\32\7\1\17\1\20\1\21"+
    "\1\0\1\7\1\22\32\7\3\0\1\23\6\0\1\3"+
    "\34\0\4\7\4\0\1\7\12\0\1\7\4\0\1\7"+
    "\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7"+
    "\16\0\5\7\7\0\1\7\1\0\1\7\201\0\5\7"+
    "\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7"+
    "\1\0\3\7\1\0\1\7\1\0\24\7\1\0\123\7"+
    "\1\0\213\7\10\0\246\7\1\0\46\7\2\0\1\7"+
    "\6\0\51\7\6\0\1\7\100\0\33\7\4\0\4\7"+
    "\30\0\1\7\24\0\53\7\43\0\2\7\1\0\143\7"+
    "\1\0\1\7\17\0\2\7\7\0\2\7\12\0\3\7"+
    "\2\0\1\7\20\0\1\7\1\0\36\7\35\0\131\7"+
    "\13\0\1\7\30\0\41\7\11\0\2\7\4\0\1\7"+
    "\3\0\30\7\4\0\1\7\11\0\1\7\3\0\1\7"+
    "\27\0\31\7\7\0\13\7\5\0\30\7\1\0\6\7"+
    "\21\0\52\7\72\0\66\7\3\0\1\7\22\0\1\7"+
    "\7\0\12\7\17\0\20\7\4\0\10\7\2\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7"+
    "\3\0\1\7\20\0\1\7\15\0\2\7\1\0\3\7"+
    "\16\0\4\7\7\0\2\7\10\0\6\7\4\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7"+
    "\1\0\2\7\37\0\4\7\1\0\1\7\23\0\3\7"+
    "\20\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\3\0\1\7\22\0\1\7"+
    "\17\0\2\7\17\0\1\7\7\0\1\7\13\0\10\7"+
    "\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7"+
    "\1\0\5\7\3\0\1\7\36\0\2\7\1\0\3\7"+
    "\17\0\1\7\21\0\1\7\1\0\6\7\3\0\3\7"+
    "\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7"+
    "\3\0\2\7\3\0\3\7\3\0\14\7\26\0\1\7"+
    "\50\0\1\7\13\0\10\7\1\0\3\7\1\0\27\7"+
    "\1\0\20\7\3\0\1\7\32\0\3\7\2\0\1\7"+
    "\2\0\2\7\36\0\1\7\4\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\12\7\1\0\5\7\3\0\1\7"+
    "\37\0\2\7\1\0\2\7\17\0\2\7\21\0\11\7"+
    "\1\0\3\7\1\0\51\7\2\0\1\7\20\0\1\7"+
    "\5\0\3\7\10\0\3\7\30\0\6\7\5\0\22\7"+
    "\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7"+
    "\72\0\60\7\1\0\2\7\13\0\10\7\72\0\2\7"+
    "\1\0\1\7\1\0\5\7\1\0\30\7\1\0\1\7"+
    "\1\0\12\7\1\0\2\7\11\0\1\7\2\0\5\7"+
    "\1\0\1\7\25\0\4\7\40\0\1\7\77\0\10\7"+
    "\1\0\44\7\33\0\5\7\163\0\53\7\24\0\1\7"+
    "\20\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7"+
    "\7\0\3\7\4\0\15\7\14\0\1\7\21\0\46\7"+
    "\1\0\1\7\5\0\1\7\2\0\53\7\1\0\115\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7"+
    "\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7"+
    "\1\0\71\7\1\0\4\7\2\0\103\7\45\0\20\7"+
    "\20\0\126\7\2\0\6\7\3\0\u016c\7\2\0\21\7"+
    "\1\0\32\7\5\0\113\7\3\0\13\7\7\0\22\7"+
    "\15\0\23\7\16\0\22\7\16\0\15\7\1\0\3\7"+
    "\17\0\64\7\43\0\1\7\3\0\2\7\103\0\131\7"+
    "\7\0\5\7\2\0\42\7\1\0\1\7\5\0\106\7"+
    "\12\0\37\7\61\0\36\7\2\0\5\7\13\0\54\7"+
    "\4\0\32\7\66\0\27\7\11\0\65\7\122\0\1\7"+
    "\135\0\57\7\21\0\10\7\66\0\36\7\15\0\2\7"+
    "\12\0\54\7\32\0\44\7\51\0\3\7\12\0\44\7"+
    "\2\0\11\7\7\0\53\7\2\0\3\7\51\0\4\7"+
    "\1\0\6\7\1\0\2\7\3\0\1\7\5\0\300\7"+
    "\100\0\26\7\2\0\6\7\2\0\46\7\2\0\6\7"+
    "\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7"+
    "\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7"+
    "\4\0\15\7\5\0\3\7\1\0\7\7\53\0\2\3"+
    "\25\0\2\7\23\0\1\7\34\0\1\7\15\0\1\7"+
    "\20\0\15\7\3\0\41\7\101\0\1\7\4\0\1\7"+
    "\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7"+
    "\2\0\4\7\5\0\5\7\4\0\1\7\21\0\51\7"+
    "\u0177\0\345\7\6\0\4\7\3\0\2\7\14\0\46\7"+
    "\1\0\1\7\5\0\1\7\2\0\70\7\7\0\1\7"+
    "\20\0\27\7\11\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\120\0\1\7\325\0\3\7\31\0\11\7"+
    "\7\0\5\7\2\0\5\7\4\0\126\7\6\0\3\7"+
    "\1\0\132\7\1\0\4\7\5\0\53\7\1\0\136\7"+
    "\21\0\40\7\60\0\235\7\103\0\56\7\2\0\15\7"+
    "\3\0\20\7\12\0\2\7\24\0\57\7\20\0\37\7"+
    "\2\0\120\7\47\0\11\7\2\0\147\7\2\0\100\7"+
    "\5\0\2\7\1\0\1\7\1\0\5\7\30\0\20\7"+
    "\1\0\3\7\1\0\4\7\1\0\27\7\25\0\1\7"+
    "\7\0\64\7\16\0\62\7\76\0\6\7\3\0\1\7"+
    "\1\0\2\7\13\0\34\7\12\0\27\7\31\0\35\7"+
    "\7\0\57\7\34\0\1\7\20\0\5\7\1\0\12\7"+
    "\12\0\5\7\1\0\51\7\27\0\3\7\1\0\10\7"+
    "\24\0\27\7\3\0\1\7\3\0\62\7\1\0\1\7"+
    "\3\0\2\7\2\0\5\7\2\0\1\7\1\0\1\7"+
    "\30\0\3\7\2\0\13\7\7\0\3\7\14\0\6\7"+
    "\2\0\6\7\2\0\6\7\11\0\7\7\1\0\7\7"+
    "\1\0\53\7\1\0\16\7\6\0\163\7\35\0\244\7"+
    "\14\0\27\7\4\0\61\7\4\0\u0100\3\156\7\2\0"+
    "\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\0"+
    "\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0"+
    "\2\7\1\0\2\7\1\0\154\7\41\0\153\7\22\0"+
    "\100\7\2\0\66\7\50\0\15\7\66\0\2\7\30\0"+
    "\3\7\31\0\1\7\6\0\5\7\1\0\207\7\7\0"+
    "\1\7\34\0\32\7\4\0\1\7\1\0\32\7\13\0"+
    "\131\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0"+
    "\3\7\3\0\2\7\3\0\2\7\31\0\14\7\1\0"+
    "\32\7\1\0\23\7\1\0\2\7\1\0\17\7\2\0"+
    "\16\7\42\0\173\7\105\0\65\7\u010b\0\35\7\3\0"+
    "\61\7\57\0\40\7\15\0\36\7\5\0\46\7\12\0"+
    "\36\7\2\0\44\7\4\0\10\7\1\0\5\7\52\0"+
    "\236\7\22\0\44\7\4\0\44\7\4\0\50\7\10\0"+
    "\64\7\14\0\13\7\1\0\17\7\1\0\7\7\1\0"+
    "\2\7\1\0\13\7\1\0\17\7\1\0\7\7\1\0"+
    "\2\7\103\0\67\7\11\0\26\7\12\0\10\7\30\0"+
    "\6\7\1\0\52\7\1\0\11\7\105\0\6\7\2\0"+
    "\1\7\1\0\54\7\1\0\2\7\3\0\1\7\2\0"+
    "\27\7\12\0\27\7\11\0\37\7\101\0\23\7\1\0"+
    "\2\7\12\0\26\7\12\0\32\7\106\0\70\7\6\0"+
    "\2\7\100\0\1\7\17\0\4\7\1\0\3\7\1\0"+
    "\35\7\52\0\35\7\3\0\35\7\43\0\10\7\1\0"+
    "\34\7\33\0\66\7\12\0\26\7\12\0\23\7\15\0"+
    "\22\7\156\0\111\7\67\0\63\7\15\0\63\7\15\0"+
    "\44\7\u015c\0\52\7\6\0\2\7\116\0\35\7\12\0"+
    "\1\7\10\0\26\7\52\0\22\7\56\0\25\7\33\0"+
    "\27\7\14\0\65\7\71\0\2\7\2\0\1\7\15\0"+
    "\55\7\40\0\31\7\32\0\44\7\35\0\1\7\2\0"+
    "\1\7\10\0\43\7\3\0\1\7\14\0\60\7\16\0"+
    "\4\7\25\0\1\7\1\0\1\7\43\0\22\7\1\0"+
    "\31\7\23\0\2\7\77\0\7\7\1\0\1\7\1\0"+
    "\4\7\1\0\17\7\1\0\12\7\7\0\57\7\46\0"+
    "\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\3\0\1\7\22\0\1\7\14\0"+
    "\5\7\236\0\65\7\22\0\4\7\24\0\3\7\36\0"+
    "\60\7\24\0\2\7\1\0\1\7\270\0\57\7\51\0"+
    "\4\7\44\0\60\7\24\0\1\7\73\0\53\7\15\0"+
    "\1\7\107\0\33\7\45\0\7\7\271\0\54\7\164\0"+
    "\100\7\37\0\10\7\2\0\1\7\2\0\10\7\1\0"+
    "\2\7\1\0\30\7\17\0\1\7\1\0\1\7\136\0"+
    "\10\7\2\0\47\7\20\0\1\7\1\0\1\7\34\0"+
    "\1\7\12\0\50\7\7\0\1\7\25\0\1\7\13\0"+
    "\56\7\23\0\1\7\22\0\111\7\7\0\11\7\1\0"+
    "\45\7\21\0\1\7\61\0\36\7\160\0\7\7\1\0"+
    "\2\7\1\0\46\7\25\0\1\7\31\0\6\7\1\0"+
    "\2\7\1\0\40\7\16\0\1\7\u0147\0\23\7\17\0"+
    "\1\7\1\0\15\7\1\0\42\7\174\0\1\7\54\0"+
    "\4\7\37\0\232\7\146\0\157\7\21\0\304\7\u014c\0"+
    "\141\7\17\0\60\7\21\0\6\7\271\0\107\7\271\0"+
    "\71\7\7\0\37\7\21\0\117\7\21\0\36\7\22\0"+
    "\60\7\20\0\4\7\37\0\25\7\5\0\23\7\260\0"+
    "\100\7\200\0\113\7\5\0\1\7\102\0\15\7\100\0"+
    "\2\7\1\0\1\7\34\0\370\7\10\0\326\7\52\0"+
    "\11\7\u01e7\0\4\7\1\0\7\7\1\0\2\7\1\0"+
    "\43\7\17\0\1\7\35\0\3\7\2\0\1\7\16\0"+
    "\4\7\10\0\u018c\7\4\0\153\7\5\0\15\7\3\0"+
    "\11\7\7\0\12\7\146\0\125\7\1\0\107\7\1\0"+
    "\2\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0"+
    "\14\7\1\0\1\7\1\0\7\7\1\0\101\7\1\0"+
    "\4\7\2\0\10\7\1\0\7\7\1\0\34\7\1\0"+
    "\4\7\1\0\5\7\1\0\1\7\3\0\7\7\1\0"+
    "\u0154\7\2\0\31\7\1\0\31\7\1\0\37\7\1\0"+
    "\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0"+
    "\31\7\1\0\37\7\1\0\31\7\1\0\10\7\64\0"+
    "\37\7\6\0\6\7\u0105\0\76\7\222\0\55\7\12\0"+
    "\7\7\20\0\1\7\u0141\0\36\7\22\0\54\7\23\0"+
    "\1\7\320\0\34\7\364\0\7\7\1\0\4\7\1\0"+
    "\2\7\1\0\17\7\1\0\305\7\73\0\104\7\7\0"+
    "\1\7\u0164\0\1\7\117\0\4\7\1\0\33\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\12\7\1\0"+
    "\4\7\1\0\1\7\1\0\1\7\6\0\1\7\4\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\3\7\1\0"+
    "\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\2\0\4\7\1\0\7\7\1\0\4\7\1\0"+
    "\4\7\1\0\1\7\1\0\12\7\1\0\21\7\5\0"+
    "\3\7\1\0\5\7\1\0\21\7\104\0\340\7\40\0"+
    "\72\7\6\0\336\7\2\0\u0182\7\16\0\u0131\7\37\0"+
    "\36\7\342\0\113\7\5\0\u0160\7\120\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30720];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\3\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\4\2\1\10\2\11\2\2\1\12\3\2\1\13\1\14"+
    "\1\15\1\13\1\16\2\13\1\0\1\17\3\0\1\20"+
    "\2\0\1\11\1\21\1\12\7\0\1\22\3\0\1\23"+
    "\1\11\2\0\1\24\1\0\1\12\1\0\1\25\2\0"+
    "\1\26\1\0\1\10\2\0\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\24\0\50\0\74\0\120\0\144\0\170\0\214"+
    "\0\240\0\264\0\310\0\334\0\264\0\360\0\264\0\264"+
    "\0\264\0\u0104\0\u0118\0\u012c\0\u0140\0\u0154\0\u0168\0\u017c"+
    "\0\u0190\0\310\0\u01a4\0\u01b8\0\u01cc\0\u01e0\0\u01f4\0\264"+
    "\0\u0208\0\264\0\310\0\u021c\0\u0230\0\u0244\0\310\0\264"+
    "\0\u0258\0\u026c\0\u0280\0\264\0\u0294\0\u02a8\0\u02bc\0\u02d0"+
    "\0\u02e4\0\u02f8\0\u030c\0\u0320\0\u0334\0\u0348\0\u035c\0\u0370"+
    "\0\264\0\u0384\0\u0398\0\u03ac\0\u03c0\0\u03d4\0\u01e0\0\u03e8"+
    "\0\264\0\u03fc\0\u0410\0\u0424\0\264\0\u0438\0\u044c\0\264"+
    "\0\u0460\0\u03d4\0\u0474\0\u0488\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\12\12\1\13\1\12\1\14\7\12\1\15\1\16\1\17"+
    "\1\15\1\16\1\17\1\16\1\15\1\20\1\21\1\22"+
    "\4\15\1\23\1\24\1\15\1\25\1\26\1\15\1\27"+
    "\1\17\1\15\1\30\1\17\1\31\1\15\1\20\1\21"+
    "\1\32\3\15\1\33\1\23\1\24\1\15\1\25\1\26"+
    "\1\15\1\16\1\17\1\15\1\16\1\17\1\16\1\34"+
    "\2\15\1\32\4\15\1\35\2\15\1\36\2\15\1\16"+
    "\1\17\1\15\1\16\1\17\1\16\3\15\1\32\4\15"+
    "\1\37\5\15\1\27\1\17\1\15\1\30\1\17\1\31"+
    "\1\15\1\20\1\21\1\32\4\15\1\23\1\24\1\15"+
    "\1\25\1\26\1\40\1\41\1\42\1\40\1\41\1\42"+
    "\1\41\3\40\1\43\12\40\1\16\1\42\1\40\1\16"+
    "\1\42\1\16\3\40\1\44\7\40\1\45\1\46\1\40"+
    "\1\41\1\42\1\40\1\41\1\42\1\41\3\40\1\43"+
    "\7\40\1\45\1\46\36\0\1\47\1\0\1\50\21\0"+
    "\1\51\12\0\1\16\2\0\1\16\1\0\1\16\27\0"+
    "\1\22\1\0\1\50\16\0\1\52\12\0\1\53\20\0"+
    "\1\54\1\0\1\54\24\0\1\55\24\0\1\56\1\0"+
    "\1\27\2\0\1\30\1\0\1\30\16\0\1\30\2\0"+
    "\1\30\1\0\1\30\16\0\1\30\2\0\1\30\1\0"+
    "\1\57\24\0\1\60\23\0\1\34\3\0\1\61\1\0"+
    "\1\34\15\0\1\62\12\0\1\63\1\0\2\64\1\0"+
    "\17\64\1\0\1\64\7\0\1\65\12\0\1\66\2\0"+
    "\1\41\2\0\1\41\1\0\1\41\27\0\1\44\1\0"+
    "\1\50\31\0\1\67\24\0\1\70\12\0\1\71\20\0"+
    "\1\52\3\0\1\72\1\0\1\52\3\0\1\73\2\0"+
    "\2\74\1\0\17\74\1\0\1\74\22\0\1\75\24\0"+
    "\1\75\1\0\1\30\2\0\1\30\1\0\1\76\24\0"+
    "\1\60\5\0\1\60\15\0\1\34\3\0\1\61\6\0"+
    "\1\77\10\0\1\62\3\0\1\100\1\0\1\62\3\0"+
    "\1\101\2\0\2\102\1\0\17\102\1\0\1\102\2\64"+
    "\1\0\17\64\1\103\1\64\7\0\1\65\3\0\1\104"+
    "\1\0\1\65\3\0\1\105\2\0\2\106\1\0\17\106"+
    "\1\0\1\106\22\0\1\107\24\0\1\107\7\0\1\52"+
    "\3\0\1\72\5\0\1\73\1\53\1\0\10\110\1\0"+
    "\6\110\1\0\4\110\2\74\1\0\17\74\1\111\1\74"+
    "\2\75\4\0\16\75\1\0\1\30\2\0\1\30\1\0"+
    "\1\112\24\0\1\62\3\0\1\100\5\0\1\101\1\63"+
    "\1\0\2\102\1\0\17\102\1\113\1\102\13\0\1\61"+
    "\17\0\1\65\3\0\1\104\5\0\1\105\1\66\1\0"+
    "\2\106\1\0\17\106\1\114\1\106\1\0\1\107\1\115"+
    "\1\0\1\107\1\0\1\107\30\0\1\72\5\0\1\73"+
    "\15\0\1\100\5\0\1\101\15\0\1\104\5\0\1\105"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1180];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\2\1\1\11\1\1\3\11\16\1\1\11"+
    "\1\1\1\11\4\1\1\0\1\11\3\0\1\11\2\0"+
    "\3\1\7\0\1\11\3\0\2\1\2\0\1\11\1\0"+
    "\1\1\1\0\1\11\2\0\1\11\1\0\1\1\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  /**
   * Counts the number of line breaks after the previous text, typically paragraph.
   * White spaces as well as leading asterisks aren't considered as text, so, they don't reset the counter.
   * It allows implementing markdown spec in a more convenient way.
   * For instance, indented code blocks require two consecutive line breaks after paragraphs.
   */
  private int consecutiveLineBreakCount;

  public _KDocLexer() {
    this((java.io.Reader)null);
  }

  private boolean isLastToken() {
    return zzMarkedPos == zzBuffer.length();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _KDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { consecutiveLineBreakCount = 0;
return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 24: break;
          case 2:
            { consecutiveLineBreakCount = 0;
        yybegin(CONTENTS);
        return KDocTokens.TEXT;
            }
          // fall through
          case 25: break;
          case 3:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 26: break;
          case 4:
            { consecutiveLineBreakCount++;
        yybegin(LINE_BEGINNING);
        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 27: break;
          case 5:
            { consecutiveLineBreakCount = 0;
        yybegin(CONTENTS);
        return KDocTokens.KDOC_LPAR;
            }
          // fall through
          case 28: break;
          case 6:
            { consecutiveLineBreakCount = 0;
        yybegin(CONTENTS);
        return KDocTokens.KDOC_RPAR;
            }
          // fall through
          case 29: break;
          case 7:
            { yybegin(CONTENTS_BEGINNING);
              return KDocTokens.LEADING_ASTERISK;
            }
          // fall through
          case 30: break;
          case 8:
            { if(yystate() == CONTENTS_BEGINNING) {
            yybegin(INDENTED_CODE_BLOCK);
            return KDocTokens.CODE_BLOCK_TEXT;
        }
            }
          // fall through
          case 31: break;
          case 9:
            { if (yystate() != CONTENTS_BEGINNING) {
            yybegin(CONTENTS);
        }
        return KDocTokens.TEXT;  // internal white space
            }
          // fall through
          case 32: break;
          case 10:
            { consecutiveLineBreakCount = 0;
        yybegin(TAG_TEXT_BEGINNING);
        return KDocTokens.MARKDOWN_LINK;
            }
          // fall through
          case 33: break;
          case 11:
            { consecutiveLineBreakCount = 0;
        if (yystate() != INDENTED_CODE_BLOCK) {
            yybegin(CODE_BLOCK);
        }
        return KDocTokens.CODE_BLOCK_TEXT;
            }
          // fall through
          case 34: break;
          case 12:
            { return KDocTokens.CODE_BLOCK_TEXT;
            }
          // fall through
          case 35: break;
          case 13:
            { consecutiveLineBreakCount++;
        yybegin(yystate() == INDENTED_CODE_BLOCK ? LINE_BEGINNING : CODE_BLOCK_LINE_BEGINNING);
        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 36: break;
          case 14:
            { yybegin(CODE_BLOCK_CONTENTS_BEGINNING);
        return KDocTokens.LEADING_ASTERISK;
            }
          // fall through
          case 37: break;
          case 15:
            { consecutiveLineBreakCount = 0;
              if (isLastToken()) return KDocTokens.END;
              else return KDocTokens.TEXT;
            }
          // fall through
          case 38: break;
          case 16:
            { consecutiveLineBreakCount = 0;
        yybegin(CONTENTS);
        return KDocTokens.MARKDOWN_ESCAPED_CHAR;
            }
          // fall through
          case 39: break;
          case 17:
            { consecutiveLineBreakCount = 0;
    KDocKnownTag tag = KDocKnownTag.Companion.findByTagName(zzBuffer.subSequence(zzStartRead, zzMarkedPos));
    yybegin(tag != null && tag.isReferenceRequired() ? TAG_BEGINNING : TAG_TEXT_BEGINNING);
    return KDocTokens.TAG_NAME;
            }
          // fall through
          case 40: break;
          case 18:
            { yybegin(CONTENTS_BEGINNING);
                                            return KDocTokens.START;
            }
          // fall through
          case 41: break;
          case 19:
            { consecutiveLineBreakCount = 0;
        yybegin(CODE_BLOCK_LINE_BEGINNING);
        return KDocTokens.TEXT;
            }
          // fall through
          case 42: break;
          case 20:
            { consecutiveLineBreakCount = 0;
                  yybegin(TAG_TEXT_BEGINNING);
                  return KDocTokens.MARKDOWN_LINK;
            }
          // fall through
          case 43: break;
          case 21:
            { consecutiveLineBreakCount = 0;
                  yybegin(CONTENTS);
                  return KDocTokens.MARKDOWN_LINK;
            }
          // fall through
          case 44: break;
          case 22:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { consecutiveLineBreakCount = 0;
        yybegin(CONTENTS);
        return KDocTokens.MARKDOWN_LINK;
            }
          // fall through
          case 45: break;
          case 23:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { consecutiveLineBreakCount = 0;
        // Code fence end
        yybegin(CONTENTS);
        return KDocTokens.TEXT;
            }
          // fall through
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

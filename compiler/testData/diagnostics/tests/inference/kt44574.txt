package

public fun main(): kotlin.Unit

public sealed class PageEvent2</*0*/ T : kotlin.Any> {
    protected constructor PageEvent2</*0*/ T : kotlin.Any>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public final class Insert</*0*/ T : kotlin.Any> : PageEvent2<T> {
        public constructor Insert</*0*/ T : kotlin.Any>(/*0*/ pages: T)
        public final val pages: T
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final class LoadStateUpdate</*0*/ T : kotlin.Any> : PageEvent2<T> {
        public constructor LoadStateUpdate</*0*/ T : kotlin.Any>()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}

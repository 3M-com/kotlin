// --- IR for <main> after Evaluate and optimize function statements
MODULE_FRAGMENT name:<main>
  FILE fqName:<root> fileName:/tryCatch.kt
    FUN name:withTryCatch visibility:public modality:FINAL <> (flag:kotlin.Boolean) returnType:kotlin.Unit [inline]
      annotations:
        PartialEvaluation
      VALUE_PARAMETER name:flag index:0 type:kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from='public final fun withTryCatch (flag: kotlin.Boolean): kotlin.Unit [inline] declared in <root>'
          TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
            TRY type=kotlin.String
              try: BLOCK type=kotlin.String origin=null
                WHEN type=kotlin.String origin=IF
                  BRANCH
                    if: GET_VAR 'flag: kotlin.Boolean declared in <root>.withTryCatch' type=kotlin.Boolean origin=null
                    then: CONST String type=kotlin.String value="OK"
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: CONST String type=kotlin.String value="Fail"
              CATCH parameter=val e: java.lang.Exception{ kotlin.TypeAliasesKt.Exception } [val] declared in <root>.withTryCatch
                VAR CATCH_PARAMETER name:e type:java.lang.Exception{ kotlin.TypeAliasesKt.Exception } [val]
                BLOCK type=kotlin.String origin=null
                  WHEN type=kotlin.String origin=IF
                    BRANCH
                      if: GET_VAR 'flag: kotlin.Boolean declared in <root>.withTryCatch' type=kotlin.Boolean origin=null
                      then: CONST String type=kotlin.String value="OK"
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: CONST String type=kotlin.String value="Fail"
              finally: BLOCK type=kotlin.Unit origin=null
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: GET_VAR 'flag: kotlin.Boolean declared in <root>.withTryCatch' type=kotlin.Boolean origin=null
                    then: TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                      CONST String type=kotlin.String value="OK"
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                      CONST String type=kotlin.String value="Fail"
    FUN name:mutableVar visibility:public modality:FINAL <> () returnType:kotlin.Int [inline]
      annotations:
        PartialEvaluation
      BLOCK_BODY
        VAR name:a type:kotlin.Int [var]
          CONST Int type=kotlin.Int value=0
        TRY type=kotlin.Unit
          try: BLOCK type=kotlin.Unit origin=null
            SET_VAR 'var a: kotlin.Int [var] declared in <root>.mutableVar' type=kotlin.Unit origin=EQ
              CONST Int type=kotlin.Int value=1
          CATCH parameter=val e: java.lang.Exception{ kotlin.TypeAliasesKt.Exception } [val] declared in <root>.mutableVar
            VAR CATCH_PARAMETER name:e type:java.lang.Exception{ kotlin.TypeAliasesKt.Exception } [val]
            BLOCK type=kotlin.Unit origin=null
              SET_VAR 'var a: kotlin.Int [var] declared in <root>.mutableVar' type=kotlin.Unit origin=EQ
                CONST Int type=kotlin.Int value=2
          finally: BLOCK type=kotlin.Unit origin=null
            SET_VAR 'var a: kotlin.Int [var] declared in <root>.mutableVar' type=kotlin.Unit origin=EQ
              CONST Int type=kotlin.Int value=3
        RETURN type=kotlin.Nothing from='public final fun mutableVar (): kotlin.Int [inline] declared in <root>'
          GET_VAR 'var a: kotlin.Int [var] declared in <root>.mutableVar' type=kotlin.Int origin=null
    PROPERTY name:a visibility:public modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Unit visibility:private [final,static]
        EXPRESSION_BODY
          RETURNABLE_BLOCK type=kotlin.Unit origin=null
            RETURN type=kotlin.Nothing from='RETURNABLE_BLOCK type=kotlin.Unit origin=null'
              TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                TRY type=kotlin.String
                  try: BLOCK type=kotlin.String origin=null
                    CONST String type=kotlin.String value="OK"
                  CATCH parameter=val e_1: java.lang.Exception{ kotlin.TypeAliasesKt.Exception } [val] declared in <root>.a
                    VAR CATCH_PARAMETER name:e_1 type:java.lang.Exception{ kotlin.TypeAliasesKt.Exception } [val]
                    BLOCK type=kotlin.String origin=null
                      CONST String type=kotlin.String value="OK"
                  finally: BLOCK type=kotlin.Unit origin=null
                    TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                      CONST String type=kotlin.String value="OK"
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a> visibility:public modality:FINAL <> () returnType:kotlin.Unit
        correspondingProperty: PROPERTY name:a visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-a> (): kotlin.Unit declared in <root>'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlin.Unit visibility:private [final,static]' type=kotlin.Unit origin=null
    PROPERTY name:b visibility:public modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:b type:kotlin.Int visibility:private [final,static]
        EXPRESSION_BODY
          RETURNABLE_BLOCK type=kotlin.Int origin=null
            VAR name:a_1 type:kotlin.Int [var]
              CONST Int type=kotlin.Int value=0
            TRY type=kotlin.Unit
              try: BLOCK type=kotlin.Unit origin=null
                SET_VAR 'var a_1: kotlin.Int [var] declared in <root>.b' type=kotlin.Unit origin=EQ
                  CONST Int type=kotlin.Int value=1
              CATCH parameter=val e_2: java.lang.Exception{ kotlin.TypeAliasesKt.Exception } [val] declared in <root>.b
                VAR CATCH_PARAMETER name:e_2 type:java.lang.Exception{ kotlin.TypeAliasesKt.Exception } [val]
                BLOCK type=kotlin.Unit origin=null
                  SET_VAR 'var a_1: kotlin.Int [var] declared in <root>.b' type=kotlin.Unit origin=EQ
                    CONST Int type=kotlin.Int value=2
              finally: BLOCK type=kotlin.Unit origin=null
                SET_VAR 'var a_1: kotlin.Int [var] declared in <root>.b' type=kotlin.Unit origin=EQ
                  CONST Int type=kotlin.Int value=3
            RETURN type=kotlin.Nothing from='RETURNABLE_BLOCK type=kotlin.Int origin=null'
              GET_VAR 'var a_1: kotlin.Int [var] declared in <root>.b' type=kotlin.Int origin=null
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b> visibility:public modality:FINAL <> () returnType:kotlin.Int
        correspondingProperty: PROPERTY name:b visibility:public modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='public final fun <get-b> (): kotlin.Int declared in <root>'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b type:kotlin.Int visibility:private [final,static]' type=kotlin.Int origin=null
  FILE fqName:kotlin fileName:/CompileTimeCalculation.kt
    CLASS ANNOTATION_CLASS name:CompileTimeCalculation modality:FINAL visibility:public superTypes:[kotlin.Annotation]
      annotations:
        Target(allowedTargets = [GET_ENUM 'ENUM_ENTRY IR_EXTERNAL_DECLARATION_STUB name:FUNCTION' type=kotlin.annotation.AnnotationTarget, GET_ENUM 'ENUM_ENTRY IR_EXTERNAL_DECLARATION_STUB name:PROPERTY' type=kotlin.annotation.AnnotationTarget])
        Retention(value = GET_ENUM 'ENUM_ENTRY IR_EXTERNAL_DECLARATION_STUB name:BINARY' type=kotlin.annotation.AnnotationRetention)
      $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:kotlin.CompileTimeCalculation
      CONSTRUCTOR visibility:public <> () returnType:kotlin.CompileTimeCalculation [primary]
      FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
        overridden:
          public open fun equals (other: kotlin.Any?): kotlin.Boolean [fake_override,operator] declared in kotlin.Annotation
        $this: VALUE_PARAMETER name:<this> type:kotlin.Any
        VALUE_PARAMETER name:other index:0 type:kotlin.Any?
      FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
        overridden:
          public open fun hashCode (): kotlin.Int [fake_override] declared in kotlin.Annotation
        $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
        overridden:
          public open fun toString (): kotlin.String [fake_override] declared in kotlin.Annotation
        $this: VALUE_PARAMETER name:<this> type:kotlin.Any
  FILE fqName:kotlin fileName:/PartialEvaluation.kt
    CLASS ANNOTATION_CLASS name:PartialEvaluation modality:FINAL visibility:public superTypes:[kotlin.Annotation]
      annotations:
        Target(allowedTargets = [GET_ENUM 'ENUM_ENTRY IR_EXTERNAL_DECLARATION_STUB name:FUNCTION' type=kotlin.annotation.AnnotationTarget])
        Retention(value = GET_ENUM 'ENUM_ENTRY IR_EXTERNAL_DECLARATION_STUB name:BINARY' type=kotlin.annotation.AnnotationRetention)
      $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:kotlin.PartialEvaluation
      CONSTRUCTOR visibility:public <> () returnType:kotlin.PartialEvaluation [primary]
      FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
        overridden:
          public open fun equals (other: kotlin.Any?): kotlin.Boolean [fake_override,operator] declared in kotlin.Annotation
        $this: VALUE_PARAMETER name:<this> type:kotlin.Any
        VALUE_PARAMETER name:other index:0 type:kotlin.Any?
      FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
        overridden:
          public open fun hashCode (): kotlin.Int [fake_override] declared in kotlin.Annotation
        $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
        overridden:
          public open fun toString (): kotlin.String [fake_override] declared in kotlin.Annotation
        $this: VALUE_PARAMETER name:<this> type:kotlin.Any

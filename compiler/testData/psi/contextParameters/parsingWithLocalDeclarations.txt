KtFile: parsingWithLocalDeclarations.kt
  PACKAGE_DIRECTIVE
    <empty list>
  PsiComment(EOL_COMMENT)('// LANGUAGE: +ContextParameters')
  PsiWhiteSpace('\n')
  PsiComment(EOL_COMMENT)('// ISSUE: KT-80853, KT-81521')
  PsiWhiteSpace('\n')
  PsiComment(EOL_COMMENT)('// COMPILATION_ERRORS')
  PsiWhiteSpace('\n\n')
  IMPORT_LIST
    IMPORT_DIRECTIVE
      PsiElement(import)('import')
      PsiWhiteSpace(' ')
      DOT_QUALIFIED_EXPRESSION
        DOT_QUALIFIED_EXPRESSION
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('kotlin')
          PsiElement(DOT)('.')
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('reflect')
        PsiElement(DOT)('.')
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('KClass')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('test')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      PsiComment(EOL_COMMENT)('// Class reference')
      PsiWhiteSpace('\n\n    ')
      CLASS
        MODIFIER_LIST
          CONTEXT_RECEIVER_LIST
            PsiElement(context)('context')
            PsiElement(LPAR)('(')
            CONTEXT_RECEIVER
              TYPE_REFERENCE
                USER_TYPE
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('String')
            PsiErrorElement:Expecting comma or ')'
              <empty list>
            PsiErrorElement:Expecting ')'
              PsiElement(COLONCOLON)('::')
        PsiElement(class)('class')
        PsiErrorElement:Name expected
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        CLASS_BODY
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n        ')
          PsiErrorElement:Expecting member declaration
            PsiElement(IDENTIFIER)('contextFun')
          PsiErrorElement:Expecting member declaration
            PsiElement(LPAR)('(')
          PsiErrorElement:Expecting member declaration
            PsiElement(RPAR)(')')
          PsiWhiteSpace('\n    ')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// Anonymous function')
      PsiWhiteSpace('\n\n    ')
      FUN
        MODIFIER_LIST
          CONTEXT_RECEIVER_LIST
            PsiElement(context)('context')
            PsiElement(LPAR)('(')
            PsiErrorElement:Expecting ')'
              <empty list>
        PsiElement(fun)('fun')
        VALUE_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        BLOCK
          PsiElement(LBRACE)('{')
          PsiElement(RBRACE)('}')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n        ')
          BLOCK
            CALL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('contextFun')
              VALUE_ARGUMENT_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
          PsiWhiteSpace('\n    ')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// Mixed with other arguments')
      PsiWhiteSpace('\n\n    ')
      FUN
        MODIFIER_LIST
          CONTEXT_RECEIVER_LIST
            PsiElement(context)('context')
            PsiElement(LPAR)('(')
            CONTEXT_RECEIVER
              TYPE_REFERENCE
                PsiErrorElement:Type expected
                  PsiElement(INTEGER_LITERAL)('1')
            PsiElement(COMMA)(',')
            PsiWhiteSpace(' ')
            CONTEXT_RECEIVER
              TYPE_REFERENCE
                PsiErrorElement:Type expected
                  <empty list>
        PsiElement(fun)('fun')
        VALUE_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        BLOCK
          PsiElement(LBRACE)('{')
          PsiElement(RBRACE)('}')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n        ')
          BLOCK
            CALL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('contextFun2')
              VALUE_ARGUMENT_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
          PsiWhiteSpace('\n    ')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      FUN
        MODIFIER_LIST
          CONTEXT_RECEIVER_LIST
            PsiElement(context)('context')
            PsiElement(LPAR)('(')
            PsiErrorElement:Expecting ')'
              <empty list>
        PsiElement(fun)('fun')
        VALUE_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        BLOCK
          PsiElement(LBRACE)('{')
          PsiElement(RBRACE)('}')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        PsiElement(INTEGER_LITERAL)('3')
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n        ')
          BLOCK
            CALL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('contextFun3')
              VALUE_ARGUMENT_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
          PsiWhiteSpace('\n    ')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      CLASS
        MODIFIER_LIST
          CONTEXT_RECEIVER_LIST
            PsiElement(context)('context')
            PsiElement(LPAR)('(')
            CONTEXT_RECEIVER
              TYPE_REFERENCE
                USER_TYPE
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('Int')
            PsiErrorElement:Expecting comma or ')'
              <empty list>
            PsiErrorElement:Expecting ')'
              PsiElement(COLONCOLON)('::')
        PsiElement(class)('class')
        PsiErrorElement:Name expected
          PsiElement(COMMA)(',')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        <empty list>
      PsiWhiteSpace(' ')
      FUN
        PsiElement(fun)('fun')
        VALUE_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        BLOCK
          PsiElement(LBRACE)('{')
          PsiElement(RBRACE)('}')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n        ')
          BLOCK
            CALL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('contextFun4')
              VALUE_ARGUMENT_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
          PsiWhiteSpace('\n    ')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      PsiComment(EOL_COMMENT)('// Recursion')
      PsiWhiteSpace('\n\n    ')
      FUN
        MODIFIER_LIST
          CONTEXT_RECEIVER_LIST
            PsiElement(context)('context')
            PsiElement(LPAR)('(')
            CONTEXT_RECEIVER
              TYPE_REFERENCE
                CONTEXT_RECEIVER_LIST
                  PsiElement(context)('context')
                  PsiElement(LPAR)('(')
                  PsiErrorElement:Expecting ')'
                    <empty list>
        PsiElement(fun)('fun')
        PsiWhiteSpace(' ')
        VALUE_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        STRING_TEMPLATE
          PsiElement(OPEN_QUOTE)('"')
          LITERAL_STRING_TEMPLATE_ENTRY
            PsiElement(REGULAR_STRING_PART)('str')
          PsiElement(CLOSING_QUOTE)('"')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          PsiWhiteSpace(' ')
          BLOCK
            CALL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('contextFun')
              VALUE_ARGUMENT_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
          PsiWhiteSpace(' ')
          PsiElement(RBRACE)('}')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          PsiWhiteSpace(' ')
          BLOCK
            CALL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('contextFun')
              VALUE_ARGUMENT_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
          PsiWhiteSpace(' ')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      CLASS
        MODIFIER_LIST
          CONTEXT_RECEIVER_LIST
            PsiElement(context)('context')
            PsiElement(LPAR)('(')
            CONTEXT_RECEIVER
              TYPE_REFERENCE
                CONTEXT_RECEIVER_LIST
                  PsiElement(context)('context')
                  PsiElement(LPAR)('(')
                  CONTEXT_RECEIVER
                    TYPE_REFERENCE
                      USER_TYPE
                        REFERENCE_EXPRESSION
                          PsiElement(IDENTIFIER)('Int')
                  PsiErrorElement:Expecting comma or ')'
                    <empty list>
                  PsiErrorElement:Expecting ')'
                    PsiElement(COLONCOLON)('::')
                PsiErrorElement:Type expected
                  <empty list>
        PsiElement(class)('class')
        PsiErrorElement:Name expected
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        CLASS_BODY
          PsiElement(LBRACE)('{')
          PsiWhiteSpace(' ')
          PsiErrorElement:Expecting member declaration
            PsiElement(IDENTIFIER)('contextFun')
          PsiErrorElement:Expecting member declaration
            PsiElement(LPAR)('(')
          PsiErrorElement:Expecting member declaration
            PsiElement(RPAR)(')')
          PsiWhiteSpace(' ')
          PsiElement(RBRACE)('}')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          PsiWhiteSpace(' ')
          BLOCK
            CALL_EXPRESSION
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('contextFun')
              VALUE_ARGUMENT_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
          PsiWhiteSpace(' ')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    MODIFIER_LIST
      CONTEXT_RECEIVER_LIST
        PsiElement(context)('context')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          PsiElement(IDENTIFIER)('x')
          PsiElement(COLON)(':')
          PsiWhiteSpace(' ')
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('Any')
        PsiElement(RPAR)(')')
    PsiWhiteSpace('\n')
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('contextFun')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    MODIFIER_LIST
      CONTEXT_RECEIVER_LIST
        PsiElement(context)('context')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          PsiElement(IDENTIFIER)('x')
          PsiElement(COLON)(':')
          PsiWhiteSpace(' ')
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('Int')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        VALUE_PARAMETER
          PsiElement(IDENTIFIER)('y')
          PsiElement(COLON)(':')
          PsiWhiteSpace(' ')
          TYPE_REFERENCE
            FUNCTION_TYPE
              VALUE_PARAMETER_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
              PsiWhiteSpace(' ')
              PsiElement(ARROW)('->')
              PsiWhiteSpace(' ')
              TYPE_REFERENCE
                USER_TYPE
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('Unit')
        PsiElement(RPAR)(')')
    PsiWhiteSpace('\n')
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('contextFun2')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    MODIFIER_LIST
      CONTEXT_RECEIVER_LIST
        PsiElement(context)('context')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          PsiElement(IDENTIFIER)('x')
          PsiElement(COLON)(':')
          PsiWhiteSpace(' ')
          TYPE_REFERENCE
            FUNCTION_TYPE
              VALUE_PARAMETER_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
              PsiWhiteSpace(' ')
              PsiElement(ARROW)('->')
              PsiWhiteSpace(' ')
              TYPE_REFERENCE
                USER_TYPE
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('Unit')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        VALUE_PARAMETER
          PsiElement(IDENTIFIER)('y')
          PsiElement(COLON)(':')
          PsiWhiteSpace(' ')
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('Int')
        PsiElement(RPAR)(')')
    PsiWhiteSpace('\n')
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('contextFun3')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    MODIFIER_LIST
      CONTEXT_RECEIVER_LIST
        PsiElement(context)('context')
        PsiElement(LPAR)('(')
        VALUE_PARAMETER
          PsiElement(IDENTIFIER)('x')
          PsiElement(COLON)(':')
          PsiWhiteSpace(' ')
          TYPE_REFERENCE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('KClass')
              TYPE_ARGUMENT_LIST
                PsiElement(LT)('<')
                TYPE_PROJECTION
                  PsiElement(MUL)('*')
                PsiElement(GT)('>')
        PsiElement(COMMA)(',')
        PsiWhiteSpace(' ')
        VALUE_PARAMETER
          PsiElement(IDENTIFIER)('y')
          PsiElement(COLON)(':')
          PsiWhiteSpace(' ')
          TYPE_REFERENCE
            FUNCTION_TYPE
              VALUE_PARAMETER_LIST
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
              PsiWhiteSpace(' ')
              PsiElement(ARROW)('->')
              PsiWhiteSpace(' ')
              TYPE_REFERENCE
                USER_TYPE
                  REFERENCE_EXPRESSION
                    PsiElement(IDENTIFIER)('Unit')
        PsiElement(RPAR)(')')
    PsiWhiteSpace('\n')
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('contextFun4')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiElement(RBRACE)('}')
/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.js.test.semantics;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("js/js.translator/testData/legacyBox")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class LegacyBoxJsTestGenerated extends AbstractLegacyBoxJsTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
    }

    public void testAllFilesPresentInLegacyBox() throws Exception {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
    }

    @TestMetadata("js/js.translator/testData/legacyBox/crossModuleRef")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class CrossModuleRef extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInCrossModuleRef() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/crossModuleRef"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("inlineJsModule.kt")
        public void testInlineJsModule() throws Exception {
            runTest("js/js.translator/testData/legacyBox/crossModuleRef/inlineJsModule.kt");
        }

        @TestMetadata("inlineJsModuleNonIdentifier.kt")
        public void testInlineJsModuleNonIdentifier() throws Exception {
            runTest("js/js.translator/testData/legacyBox/crossModuleRef/inlineJsModuleNonIdentifier.kt");
        }

        @TestMetadata("inlineJsModulePackage.kt")
        public void testInlineJsModulePackage() throws Exception {
            runTest("js/js.translator/testData/legacyBox/crossModuleRef/inlineJsModulePackage.kt");
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/export")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Export extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInExport() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/export"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("nonIndetifierModuleName.kt")
        public void testNonIndetifierModuleName() throws Exception {
            runTest("js/js.translator/testData/legacyBox/export/nonIndetifierModuleName.kt");
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/expression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Expression extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInExpression() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/expression"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("js/js.translator/testData/legacyBox/expression/function")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Function extends AbstractLegacyBoxJsTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
            }

            public void testAllFilesPresentInFunction() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/expression/function"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
            }

            @TestMetadata("manglingClashWithFunctionsWithoutParameters.kt")
            public void testManglingClashWithFunctionsWithoutParameters() throws Exception {
                runTest("js/js.translator/testData/legacyBox/expression/function/manglingClashWithFunctionsWithoutParameters.kt");
            }

            @TestMetadata("manglingStability.kt")
            public void testManglingStability() throws Exception {
                runTest("js/js.translator/testData/legacyBox/expression/function/manglingStability.kt");
            }
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/incremental")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Incremental extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInIncremental() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/incremental"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("jsModule.kt")
        public void testJsModule() throws Exception {
            runTest("js/js.translator/testData/legacyBox/incremental/jsModule.kt");
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/inline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Inline extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInInline() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/inline"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/jsExport")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JsExport extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInJsExport() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/jsExport"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("dataClass.kt")
        public void testDataClass() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsExport/dataClass.kt");
        }

        @TestMetadata("exportedDefaultStub.kt")
        public void testExportedDefaultStub() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsExport/exportedDefaultStub.kt");
        }

        @TestMetadata("jsExportInClass.kt")
        public void testJsExportInClass() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsExport/jsExportInClass.kt");
        }

        @TestMetadata("recursiveExport.kt")
        public void testRecursiveExport() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsExport/recursiveExport.kt");
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/jsModule")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JsModule extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInJsModule() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/jsModule"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("externalClass.kt")
        public void testExternalClass() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalClass.kt");
        }

        @TestMetadata("externalClassWithDefaults.kt")
        public void testExternalClassWithDefaults() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalClassWithDefaults.kt");
        }

        @TestMetadata("externalConstructor.kt")
        public void testExternalConstructor() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalConstructor.kt");
        }

        @TestMetadata("externalFunction.kt")
        public void testExternalFunction() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalFunction.kt");
        }

        @TestMetadata("externalFunctionNameClash.kt")
        public void testExternalFunctionNameClash() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalFunctionNameClash.kt");
        }

        @TestMetadata("externalFunctionPlain.kt")
        public void testExternalFunctionPlain() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalFunctionPlain.kt");
        }

        @TestMetadata("externalFunctionUmd.kt")
        public void testExternalFunctionUmd() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalFunctionUmd.kt");
        }

        @TestMetadata("externalFunctionUmdFallback.kt")
        public void testExternalFunctionUmdFallback() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalFunctionUmdFallback.kt");
        }

        @TestMetadata("externalObject.kt")
        public void testExternalObject() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalObject.kt");
        }

        @TestMetadata("externalPackage.kt")
        public void testExternalPackage() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalPackage.kt");
        }

        @TestMetadata("externalPackageInDifferentFile.kt")
        public void testExternalPackageInDifferentFile() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalPackageInDifferentFile.kt");
        }

        @TestMetadata("externalPackagePlain.kt")
        public void testExternalPackagePlain() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalPackagePlain.kt");
        }

        @TestMetadata("externalPackageUmdFallback.kt")
        public void testExternalPackageUmdFallback() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalPackageUmdFallback.kt");
        }

        @TestMetadata("externalProperty.kt")
        public void testExternalProperty() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/externalProperty.kt");
        }

        @TestMetadata("importCountCommonJS.kt")
        public void testImportCountCommonJS() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/importCountCommonJS.kt");
        }

        @TestMetadata("importCountUmd.kt")
        public void testImportCountUmd() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/importCountUmd.kt");
        }

        @TestMetadata("interfaces.kt")
        public void testInterfaces() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/interfaces.kt");
        }

        @TestMetadata("topLevelVarargFun.kt")
        public void testTopLevelVarargFun() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsModule/topLevelVarargFun.kt");
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/jsName")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JsName extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInJsName() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/jsName"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("defaultJsName.kt")
        public void testDefaultJsName() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsName/defaultJsName.kt");
        }

        @TestMetadata("jsTopLevelClashes.kt")
        public void testJsTopLevelClashes() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsName/jsTopLevelClashes.kt");
        }

        @TestMetadata("jsTopLevelRenameReserved.kt")
        public void testJsTopLevelRenameReserved() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsName/jsTopLevelRenameReserved.kt");
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/jsQualifier")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class JsQualifier extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInJsQualifier() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/jsQualifier"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("umdFallback.kt")
        public void testUmdFallback() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsQualifier/umdFallback.kt");
        }

        @TestMetadata("withModule.kt")
        public void testWithModule() throws Exception {
            runTest("js/js.translator/testData/legacyBox/jsQualifier/withModule.kt");
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/multiModuleWrappers")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class MultiModuleWrappers extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInMultiModuleWrappers() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/multiModuleWrappers"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("js/js.translator/testData/legacyBox/multiModuleWrappers/amd")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Amd extends AbstractLegacyBoxJsTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
            }

            public void testAllFilesPresentInAmd() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/multiModuleWrappers/amd"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
            }

            @TestMetadata("jsModuleOnPackage.kt")
            public void testJsModuleOnPackage() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/amd/jsModuleOnPackage.kt");
            }

            @TestMetadata("moduleWithNonIdentifierName.kt")
            public void testModuleWithNonIdentifierName() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/amd/moduleWithNonIdentifierName.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/amd/simple.kt");
            }
        }

        @TestMetadata("js/js.translator/testData/legacyBox/multiModuleWrappers/common_js")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Common_js extends AbstractLegacyBoxJsTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
            }

            public void testAllFilesPresentInCommon_js() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/multiModuleWrappers/common_js"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
            }

            @TestMetadata("inlineFromModuleWithNonIdentifierName.kt")
            public void testInlineFromModuleWithNonIdentifierName() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/common_js/inlineFromModuleWithNonIdentifierName.kt");
            }

            @TestMetadata("moduleWithNonIdentifierName.kt")
            public void testModuleWithNonIdentifierName() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/common_js/moduleWithNonIdentifierName.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/common_js/simple.kt");
            }
        }

        @TestMetadata("js/js.translator/testData/legacyBox/multiModuleWrappers/plain")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Plain extends AbstractLegacyBoxJsTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
            }

            public void testAllFilesPresentInPlain() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/multiModuleWrappers/plain"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
            }

            @TestMetadata("inlineFromModuleWithNonIdentifierName.kt")
            public void testInlineFromModuleWithNonIdentifierName() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/plain/inlineFromModuleWithNonIdentifierName.kt");
            }

            @TestMetadata("moduleWithNonIdentifierName.kt")
            public void testModuleWithNonIdentifierName() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/plain/moduleWithNonIdentifierName.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/plain/simple.kt");
            }
        }

        @TestMetadata("js/js.translator/testData/legacyBox/multiModuleWrappers/umd")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Umd extends AbstractLegacyBoxJsTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
            }

            public void testAllFilesPresentInUmd() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/multiModuleWrappers/umd"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
            }

            @TestMetadata("moduleWithNonIdentifierName.kt")
            public void testModuleWithNonIdentifierName() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/umd/moduleWithNonIdentifierName.kt");
            }

            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("js/js.translator/testData/legacyBox/multiModuleWrappers/umd/simple.kt");
            }
        }
    }

    @TestMetadata("js/js.translator/testData/legacyBox/native")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Native extends AbstractLegacyBoxJsTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest0(this::doTest, TargetBackend.JS, testDataFilePath);
        }

        public void testAllFilesPresentInNative() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("js/js.translator/testData/legacyBox/native"), Pattern.compile("^([^_](.+))\\.kt$"), null, TargetBackend.JS, true);
        }

        @TestMetadata("inheritanceInNativeClass.kt")
        public void testInheritanceInNativeClass() throws Exception {
            runTest("js/js.translator/testData/legacyBox/native/inheritanceInNativeClass.kt");
        }
    }
}

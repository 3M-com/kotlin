plugins {
    id("org.jetbrains.kotlin.multiplatform").version("<pluginMarkerVersion>")
}

repositories {
    mavenLocal()
    mavenCentral()
}

kotlin {
    val jvmWithoutJava = jvm("jvmWithoutJava") {
        attributes.attribute(Attribute.of("com.example.jvmtarget", String::class.java), "withoutJava")
    }
    val jvmWithJava = jvm("jvmWithJava") {
        withJava()
        attributes.attribute(Attribute.of("com.example.jvmtarget", String::class.java), "withJava")
    }
    val js = js {
        nodejs()
    }
    val macos64 = macosX64("macos64")
    val linux64 = linuxX64("linux64")
    val mingw64 = mingwX64("mingw64")

    sourceSets {
        val commonTest by getting {
        	dependencies {
        		implementation(kotlin("test-common"))
        		implementation(kotlin("test-annotations-common"))
        	}
        }

        val jvmWithJavaMain by getting
        val jvmWithoutJavaMain = jvmWithoutJava.compilations["main"].defaultSourceSet
        configure(listOf(jvmWithJavaMain, jvmWithoutJavaMain)) {
        	dependencies {
        		implementation(kotlin("stdlib"))
        		implementation(kotlin("script-runtime"))
        	}
        }

        val jvmWithJavaTest by getting
        val jvmWithoutJavaTest = jvmWithoutJava.compilations["test"].defaultSourceSet
        configure(listOf(jvmWithJavaTest, jvmWithoutJavaTest)) {
        	dependencies {
        		implementation(kotlin("test-junit"))
        	}
        }

        js.compilations["test"].defaultSourceSet {
        	dependencies {
        		implementation(kotlin("test-js"))
        	}
        }

		val nativeMain by creating
		configure(listOf(macos64, linux64, mingw64)) {
            compilations["main"].defaultSourceSet.dependsOn(nativeMain)
		}
    }
}
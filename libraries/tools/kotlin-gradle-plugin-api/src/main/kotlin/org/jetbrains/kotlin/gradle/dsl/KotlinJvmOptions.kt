// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task
@file:Suppress("RemoveRedundantQualifierName", "Deprecation", "DuplicatedCode")

package org.jetbrains.kotlin.gradle.dsl

interface KotlinJvmOptions : org.jetbrains.kotlin.gradle.dsl.KotlinCommonOptions {

    /**
     * Generate metadata for Java 1.8 reflection on method parameters
     * Default value: false
     */
    @get:org.gradle.api.tasks.Input
    val javaParameters: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Target version of the generated JVM bytecode (1.6 (DEPRECATED), 1.8, 9, 10, ..., 18), default is 1.8
     * Possible values: "1.6", "1.8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"
     * Default value: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    val jvmTarget: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Name of the generated .kotlin_module file
     * Default value: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    val moduleName: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Don't automatically include the Java runtime into the classpath
     * Default value: false
     */
    @get:org.gradle.api.tasks.Input
    val noJdk: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Use the old JVM backend
     * Default value: false
     */
    @get:org.gradle.api.tasks.Input
    val useOldBackend: org.gradle.api.provider.Property<kotlin.Boolean>

    interface KotlinJvmOptionsDsl : KotlinOptionsDsl<KotlinJvmOptions> {

        /**
         * Report an error if there are any warnings
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var allWarningsAsErrors: kotlin.Boolean
            get() = options.allWarningsAsErrors.get()
            set(value) = options.allWarningsAsErrors.set(value)

        /**
         * Generate no warnings
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var suppressWarnings: kotlin.Boolean
            get() = options.suppressWarnings.get()
            set(value) = options.suppressWarnings.set(value)

        /**
         * Enable verbose logging output
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var verbose: kotlin.Boolean
            get() = options.verbose.get()
            set(value) = options.verbose.set(value)

        /**
         * A list of additional compiler arguments
         * Default value: emptyList()
         */
        @get:org.gradle.api.tasks.Internal
        var freeCompilerArgs: kotlin.collections.List<kotlin.String>
            get() = options.freeCompilerArgs.get()
            set(value) = options.freeCompilerArgs.set(value)

        /**
         * Allow using declarations only from the specified version of bundled libraries
         * Possible values: "1.3 (deprecated)", "1.4 (deprecated)", "1.5", "1.6", "1.7", "1.8 (experimental)", "1.9 (experimental)"
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var apiVersion: kotlin.String?
            get() = options.apiVersion.orNull
            set(value) = options.apiVersion.set(value)

        /**
         * Provide source compatibility with the specified version of Kotlin
         * Possible values: "1.3 (deprecated)", "1.4 (deprecated)", "1.5", "1.6", "1.7", "1.8 (experimental)", "1.9 (experimental)"
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var languageVersion: kotlin.String?
            get() = options.languageVersion.orNull
            set(value) = options.languageVersion.set(value)

        /**
         * Compile using Front-end IR. Warning: this feature is far from being production-ready
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var useFir: kotlin.Boolean
            get() = options.useFir.get()
            set(value) = options.useFir.set(value)

        /**
         * Generate metadata for Java 1.8 reflection on method parameters
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var javaParameters: kotlin.Boolean
            get() = options.javaParameters.get()
            set(value) = options.javaParameters.set(value)

        /**
         * Target version of the generated JVM bytecode (1.6 (DEPRECATED), 1.8, 9, 10, ..., 18), default is 1.8
         * Possible values: "1.6", "1.8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var jvmTarget: kotlin.String?
            get() = options.jvmTarget.orNull
            set(value) = options.jvmTarget.set(value)

        /**
         * Name of the generated .kotlin_module file
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var moduleName: kotlin.String?
            get() = options.moduleName.orNull
            set(value) = options.moduleName.set(value)

        /**
         * Don't automatically include the Java runtime into the classpath
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var noJdk: kotlin.Boolean
            get() = options.noJdk.get()
            set(value) = options.noJdk.set(value)

        /**
         * Use the old JVM backend
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var useOldBackend: kotlin.Boolean
            get() = options.useOldBackend.get()
            set(value) = options.useOldBackend.set(value)
    }
}

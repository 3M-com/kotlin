// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task
@file:Suppress("RemoveRedundantQualifierName", "Deprecation", "DuplicatedCode")

package org.jetbrains.kotlin.gradle.dsl

interface KotlinCommonOptions : org.jetbrains.kotlin.gradle.dsl.KotlinCommonToolOptions {

    /**
     * Allow using declarations only from the specified version of bundled libraries
     * Possible values: "1.3 (deprecated)", "1.4 (deprecated)", "1.5", "1.6", "1.7", "1.8 (experimental)", "1.9 (experimental)"
     * Default value: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    val apiVersion: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Provide source compatibility with the specified version of Kotlin
     * Possible values: "1.3 (deprecated)", "1.4 (deprecated)", "1.5", "1.6", "1.7", "1.8 (experimental)", "1.9 (experimental)"
     * Default value: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    val languageVersion: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Compile using Front-end IR. Warning: this feature is far from being production-ready
     * Default value: false
     */
    @get:org.gradle.api.tasks.Input
    val useFir: org.gradle.api.provider.Property<kotlin.Boolean>

    interface KotlinCommonOptionsDsl : KotlinOptionsDsl<KotlinCommonOptions> {

        /**
         * Report an error if there are any warnings
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var allWarningsAsErrors: kotlin.Boolean
            get() = options.allWarningsAsErrors.get()
            set(value) = options.allWarningsAsErrors.set(value)

        /**
         * Generate no warnings
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var suppressWarnings: kotlin.Boolean
            get() = options.suppressWarnings.get()
            set(value) = options.suppressWarnings.set(value)

        /**
         * Enable verbose logging output
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var verbose: kotlin.Boolean
            get() = options.verbose.get()
            set(value) = options.verbose.set(value)

        /**
         * A list of additional compiler arguments
         * Default value: emptyList()
         */
        @get:org.gradle.api.tasks.Internal
        var freeCompilerArgs: kotlin.collections.List<kotlin.String>
            get() = options.freeCompilerArgs.get()
            set(value) = options.freeCompilerArgs.set(value)

        /**
         * Allow using declarations only from the specified version of bundled libraries
         * Possible values: "1.3 (deprecated)", "1.4 (deprecated)", "1.5", "1.6", "1.7", "1.8 (experimental)", "1.9 (experimental)"
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var apiVersion: kotlin.String?
            get() = options.apiVersion.orNull
            set(value) = options.apiVersion.set(value)

        /**
         * Provide source compatibility with the specified version of Kotlin
         * Possible values: "1.3 (deprecated)", "1.4 (deprecated)", "1.5", "1.6", "1.7", "1.8 (experimental)", "1.9 (experimental)"
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var languageVersion: kotlin.String?
            get() = options.languageVersion.orNull
            set(value) = options.languageVersion.set(value)

        /**
         * Compile using Front-end IR. Warning: this feature is far from being production-ready
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var useFir: kotlin.Boolean
            get() = options.useFir.get()
            set(value) = options.useFir.set(value)
    }
}

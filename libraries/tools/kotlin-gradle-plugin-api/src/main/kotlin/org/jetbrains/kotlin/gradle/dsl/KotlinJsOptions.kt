// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task
@file:Suppress("RemoveRedundantQualifierName", "Deprecation", "DuplicatedCode")

package org.jetbrains.kotlin.gradle.dsl

interface KotlinJsOptions : org.jetbrains.kotlin.gradle.dsl.KotlinCommonOptions {

    /**
     * Disable internal declaration export
     * Default value: false
     */
    @get:org.gradle.api.tasks.Input
    val friendModulesDisabled: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Define whether the `main` function should be called upon execution
     * Possible values: "call", "noCall"
     * Default value: "call"
     */
    @get:org.gradle.api.tasks.Input
    val main: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Generate .meta.js and .kjsm files with metadata. Use to create a library
     * Default value: true
     */
    @get:org.gradle.api.tasks.Input
    val metaInfo: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Kind of the JS module generated by the compiler
     * Possible values: "plain", "amd", "commonjs", "umd"
     * Default value: "plain"
     */
    @get:org.gradle.api.tasks.Input
    val moduleKind: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Don't automatically include the default Kotlin/JS stdlib into compilation dependencies
     * Default value: true
     */
    @get:org.gradle.api.tasks.Input
    val noStdlib: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Destination *.js file for the compilation result
     * Default value: null
     */
    @get:org.gradle.api.tasks.Internal
    val outputFile: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Generate source map
     * Default value: false
     */
    @get:org.gradle.api.tasks.Input
    val sourceMap: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Embed source files into source map
     * Possible values: "never", "always", "inlining"
     * Default value: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    val sourceMapEmbedSources: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Add the specified prefix to paths in the source map
     * Default value: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    val sourceMapPrefix: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Generate JS files for specific ECMA version
     * Possible values: "v5"
     * Default value: "v5"
     */
    @get:org.gradle.api.tasks.Input
    val target: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Translate primitive arrays to JS typed arrays
     * Default value: true
     */
    @get:org.gradle.api.tasks.Input
    val typedArrays: org.gradle.api.provider.Property<kotlin.Boolean>

    interface KotlinJsOptionsDsl : KotlinOptionsDsl<KotlinJsOptions> {

        /**
         * Report an error if there are any warnings
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var allWarningsAsErrors: kotlin.Boolean
            get() = options.allWarningsAsErrors.get()
            set(value) = options.allWarningsAsErrors.set(value)

        /**
         * Generate no warnings
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var suppressWarnings: kotlin.Boolean
            get() = options.suppressWarnings.get()
            set(value) = options.suppressWarnings.set(value)

        /**
         * Enable verbose logging output
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var verbose: kotlin.Boolean
            get() = options.verbose.get()
            set(value) = options.verbose.set(value)

        /**
         * A list of additional compiler arguments
         * Default value: emptyList()
         */
        @get:org.gradle.api.tasks.Internal
        var freeCompilerArgs: kotlin.collections.List<kotlin.String>
            get() = options.freeCompilerArgs.get()
            set(value) = options.freeCompilerArgs.set(value)

        /**
         * Allow using declarations only from the specified version of bundled libraries
         * Possible values: "1.3 (deprecated)", "1.4 (deprecated)", "1.5", "1.6", "1.7", "1.8 (experimental)", "1.9 (experimental)"
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var apiVersion: kotlin.String?
            get() = options.apiVersion.orNull
            set(value) = options.apiVersion.set(value)

        /**
         * Provide source compatibility with the specified version of Kotlin
         * Possible values: "1.3 (deprecated)", "1.4 (deprecated)", "1.5", "1.6", "1.7", "1.8 (experimental)", "1.9 (experimental)"
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var languageVersion: kotlin.String?
            get() = options.languageVersion.orNull
            set(value) = options.languageVersion.set(value)

        /**
         * Compile using Front-end IR. Warning: this feature is far from being production-ready
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var useFir: kotlin.Boolean
            get() = options.useFir.get()
            set(value) = options.useFir.set(value)

        /**
         * Disable internal declaration export
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var friendModulesDisabled: kotlin.Boolean
            get() = options.friendModulesDisabled.get()
            set(value) = options.friendModulesDisabled.set(value)

        /**
         * Define whether the `main` function should be called upon execution
         * Possible values: "call", "noCall"
         * Default value: "call"
         */
        @get:org.gradle.api.tasks.Internal
        var main: kotlin.String
            get() = options.main.get()
            set(value) = options.main.set(value)

        /**
         * Generate .meta.js and .kjsm files with metadata. Use to create a library
         * Default value: true
         */
        @get:org.gradle.api.tasks.Internal
        var metaInfo: kotlin.Boolean
            get() = options.metaInfo.get()
            set(value) = options.metaInfo.set(value)

        /**
         * Kind of the JS module generated by the compiler
         * Possible values: "plain", "amd", "commonjs", "umd"
         * Default value: "plain"
         */
        @get:org.gradle.api.tasks.Internal
        var moduleKind: kotlin.String
            get() = options.moduleKind.get()
            set(value) = options.moduleKind.set(value)

        /**
         * Don't automatically include the default Kotlin/JS stdlib into compilation dependencies
         * Default value: true
         */
        @get:org.gradle.api.tasks.Internal
        var noStdlib: kotlin.Boolean
            get() = options.noStdlib.get()
            set(value) = options.noStdlib.set(value)

        /**
         * Destination *.js file for the compilation result
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var outputFile: kotlin.String?
            get() = options.outputFile.orNull
            set(value) = options.outputFile.set(value)

        /**
         * Generate source map
         * Default value: false
         */
        @get:org.gradle.api.tasks.Internal
        var sourceMap: kotlin.Boolean
            get() = options.sourceMap.get()
            set(value) = options.sourceMap.set(value)

        /**
         * Embed source files into source map
         * Possible values: "never", "always", "inlining"
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var sourceMapEmbedSources: kotlin.String?
            get() = options.sourceMapEmbedSources.orNull
            set(value) = options.sourceMapEmbedSources.set(value)

        /**
         * Add the specified prefix to paths in the source map
         * Default value: null
         */
        @get:org.gradle.api.tasks.Internal
        var sourceMapPrefix: kotlin.String?
            get() = options.sourceMapPrefix.orNull
            set(value) = options.sourceMapPrefix.set(value)

        /**
         * Generate JS files for specific ECMA version
         * Possible values: "v5"
         * Default value: "v5"
         */
        @get:org.gradle.api.tasks.Internal
        var target: kotlin.String
            get() = options.target.get()
            set(value) = options.target.set(value)

        /**
         * Translate primitive arrays to JS typed arrays
         * Default value: true
         */
        @get:org.gradle.api.tasks.Internal
        var typedArrays: kotlin.Boolean
            get() = options.typedArrays.get()
            set(value) = options.typedArrays.set(value)
    }
}

// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task
@file:Suppress("RemoveRedundantQualifierName", "Deprecation", "DuplicatedCode")

package org.jetbrains.kotlin.gradle.dsl

interface KotlinJsOptions : org.jetbrains.kotlin.gradle.dsl.KotlinCommonOptions {

    /**
     * Disable internal declaration export
     * Default value: false
     */
    @get:org.gradle.api.tasks.Input
    val friendModulesDisabledProp: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Disable internal declaration export
     * Default value: false
     */
    @get:org.gradle.api.tasks.Internal
    var friendModulesDisabled: kotlin.Boolean
        get() = friendModulesDisabledProp.get()
        set(value) = friendModulesDisabledProp.set(value)

    /**
     * Define whether the `main` function should be called upon execution
     * Possible values: "call", "noCall"
     * Default value: "call"
     */
    @get:org.gradle.api.tasks.Input
    val mainProp: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Define whether the `main` function should be called upon execution
     * Possible values: "call", "noCall"
     * Default value: "call"
     */
    @get:org.gradle.api.tasks.Internal
    var main: kotlin.String
        get() = mainProp.get()
        set(value) = mainProp.set(value)

    /**
     * Generate .meta.js and .kjsm files with metadata. Use to create a library
     * Default value: true
     */
    @get:org.gradle.api.tasks.Input
    val metaInfoProp: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Generate .meta.js and .kjsm files with metadata. Use to create a library
     * Default value: true
     */
    @get:org.gradle.api.tasks.Internal
    var metaInfo: kotlin.Boolean
        get() = metaInfoProp.get()
        set(value) = metaInfoProp.set(value)

    /**
     * Kind of the JS module generated by the compiler
     * Possible values: "plain", "amd", "commonjs", "umd"
     * Default value: "plain"
     */
    @get:org.gradle.api.tasks.Input
    val moduleKindProp: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Kind of the JS module generated by the compiler
     * Possible values: "plain", "amd", "commonjs", "umd"
     * Default value: "plain"
     */
    @get:org.gradle.api.tasks.Internal
    var moduleKind: kotlin.String
        get() = moduleKindProp.get()
        set(value) = moduleKindProp.set(value)

    /**
     * Don't automatically include the default Kotlin/JS stdlib into compilation dependencies
     * Default value: true
     */
    @get:org.gradle.api.tasks.Input
    val noStdlibProp: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Don't automatically include the default Kotlin/JS stdlib into compilation dependencies
     * Default value: true
     */
    @get:org.gradle.api.tasks.Internal
    var noStdlib: kotlin.Boolean
        get() = noStdlibProp.get()
        set(value) = noStdlibProp.set(value)

    /**
     * Destination *.js file for the compilation result
     * Default value: null
     */
    @get:org.gradle.api.tasks.Internal
    val outputFileProp: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Destination *.js file for the compilation result
     * Default value: null
     */
    @get:org.gradle.api.tasks.Internal
    var outputFile: kotlin.String?
        get() = outputFileProp.orNull
        set(value) = outputFileProp.set(value)

    /**
     * Generate source map
     * Default value: false
     */
    @get:org.gradle.api.tasks.Input
    val sourceMapProp: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Generate source map
     * Default value: false
     */
    @get:org.gradle.api.tasks.Internal
    var sourceMap: kotlin.Boolean
        get() = sourceMapProp.get()
        set(value) = sourceMapProp.set(value)

    /**
     * Embed source files into source map
     * Possible values: "never", "always", "inlining"
     * Default value: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    val sourceMapEmbedSourcesProp: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Embed source files into source map
     * Possible values: "never", "always", "inlining"
     * Default value: null
     */
    @get:org.gradle.api.tasks.Internal
    var sourceMapEmbedSources: kotlin.String?
        get() = sourceMapEmbedSourcesProp.orNull
        set(value) = sourceMapEmbedSourcesProp.set(value)

    /**
     * Add the specified prefix to paths in the source map
     * Default value: null
     */
    @get:org.gradle.api.tasks.Optional
    @get:org.gradle.api.tasks.Input
    val sourceMapPrefixProp: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Add the specified prefix to paths in the source map
     * Default value: null
     */
    @get:org.gradle.api.tasks.Internal
    var sourceMapPrefix: kotlin.String?
        get() = sourceMapPrefixProp.orNull
        set(value) = sourceMapPrefixProp.set(value)

    /**
     * Generate JS files for specific ECMA version
     * Possible values: "v5"
     * Default value: "v5"
     */
    @get:org.gradle.api.tasks.Input
    val targetProp: org.gradle.api.provider.Property<kotlin.String>

    /**
     * Generate JS files for specific ECMA version
     * Possible values: "v5"
     * Default value: "v5"
     */
    @get:org.gradle.api.tasks.Internal
    var target: kotlin.String
        get() = targetProp.get()
        set(value) = targetProp.set(value)

    /**
     * Translate primitive arrays to JS typed arrays
     * Default value: true
     */
    @get:org.gradle.api.tasks.Input
    val typedArraysProp: org.gradle.api.provider.Property<kotlin.Boolean>

    /**
     * Translate primitive arrays to JS typed arrays
     * Default value: true
     */
    @get:org.gradle.api.tasks.Internal
    var typedArrays: kotlin.Boolean
        get() = typedArraysProp.get()
        set(value) = typedArraysProp.set(value)
}

// DO NOT EDIT MANUALLY!
// Generated by org/jetbrains/kotlin/generators/arguments/GenerateGradleOptions.kt
// To regenerate run 'generateGradleOptions' task
@file:Suppress("RemoveRedundantQualifierName", "Deprecation", "DuplicatedCode")

package org.jetbrains.kotlin.gradle.dsl

internal class KotlinJsOptionsBase @javax.inject.Inject constructor(
    objectFactory: org.gradle.api.model.ObjectFactory
) : org.jetbrains.kotlin.gradle.dsl.KotlinJsOptions {

    override val allWarningsAsErrors: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(false)

    override val suppressWarnings: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(false)

    override val verbose: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(false)

    override val freeCompilerArgs: org.gradle.api.provider.ListProperty<kotlin.String> =
        objectFactory.listProperty(kotlin.String::class.java).convention(emptyList())

    override val apiVersion: org.gradle.api.provider.Property<kotlin.String> =
        objectFactory.property(kotlin.String::class.java)

    override val languageVersion: org.gradle.api.provider.Property<kotlin.String> =
        objectFactory.property(kotlin.String::class.java)

    override val useFir: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(false)

    override val friendModulesDisabled: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(false)

    override val main: org.gradle.api.provider.Property<kotlin.String> =
        objectFactory.property(kotlin.String::class.java).convention("call")

    override val metaInfo: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(true)

    override val moduleKind: org.gradle.api.provider.Property<kotlin.String> =
        objectFactory.property(kotlin.String::class.java).convention("plain")

    override val noStdlib: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(true)

    override val outputFile: org.gradle.api.provider.Property<kotlin.String> =
        objectFactory.property(kotlin.String::class.java)

    override val sourceMap: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(false)

    override val sourceMapEmbedSources: org.gradle.api.provider.Property<kotlin.String> =
        objectFactory.property(kotlin.String::class.java)

    override val sourceMapPrefix: org.gradle.api.provider.Property<kotlin.String> =
        objectFactory.property(kotlin.String::class.java)

    override val target: org.gradle.api.provider.Property<kotlin.String> =
        objectFactory.property(kotlin.String::class.java).convention("v5")

    override val typedArrays: org.gradle.api.provider.Property<kotlin.Boolean> =
        objectFactory.property(kotlin.Boolean::class.java).convention(true)

    internal fun toCompilerArguments(args: org.jetbrains.kotlin.cli.common.arguments.K2JSCompilerArguments) {
        args.allWarningsAsErrors = allWarningsAsErrors.get()
        args.suppressWarnings = suppressWarnings.get()
        args.verbose = verbose.get()
        args.freeArgs += freeCompilerArgs.get()
        args.apiVersion = apiVersion.orNull
        args.languageVersion = languageVersion.orNull
        args.useFir = useFir.get()
        args.friendModulesDisabled = friendModulesDisabled.get()
        args.main = main.get()
        args.metaInfo = metaInfo.get()
        args.moduleKind = moduleKind.get()
        args.noStdlib = noStdlib.get()
        args.outputFile = outputFile.orNull
        args.sourceMap = sourceMap.get()
        args.sourceMapEmbedSources = sourceMapEmbedSources.orNull
        args.sourceMapPrefix = sourceMapPrefix.orNull
        args.target = target.get()
        args.typedArrays = typedArrays.get()
    }

    internal fun fillDefaultValues(args: org.jetbrains.kotlin.cli.common.arguments.K2JSCompilerArguments) {
        args.allWarningsAsErrors = false
        args.suppressWarnings = false
        args.verbose = false
        args.apiVersion = null
        args.languageVersion = null
        args.useFir = false
        args.friendModulesDisabled = false
        args.main = "call"
        args.metaInfo = true
        args.moduleKind = "plain"
        args.noStdlib = true
        args.outputFile = null
        args.sourceMap = false
        args.sourceMapEmbedSources = null
        args.sourceMapPrefix = null
        args.target = "v5"
        args.typedArrays = true
    }
}
